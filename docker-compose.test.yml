version: '3.8'

services:
  # Test Database
  test-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mindbridge_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d mindbridge_test"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Redis
  test-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend Test Runner
  backend-tests:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      # Test environment variables
      TESTING: "true"
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/mindbridge_test
      REDIS_URL: redis://test-redis:6379/0
      
      # Test configuration
      LOG_LEVEL: DEBUG
      SECRET_KEY: test-secret-key-for-testing-only
      
      # Disable external services in tests
      DISABLE_EXTERNAL_APIS: "true"
      MOCK_AI_SERVICES: "true"
      
    volumes:
      - ./backend:/app
      - test_reports:/app/reports
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        python scripts/run_tests.py --install-deps &&
        python scripts/run_tests.py --all --verbose
      "
    networks:
      - test-network

  # Unit Tests Only (Fast)
  unit-tests:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      TESTING: "true"
      DATABASE_URL: sqlite:///./test.db
    volumes:
      - ./backend:/app
      - test_reports:/app/reports
    command: python scripts/run_tests.py --unit --verbose
    networks:
      - test-network

  # Integration Tests
  integration-tests:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      TESTING: "true"
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/mindbridge_test
      REDIS_URL: redis://test-redis:6379/0
    volumes:
      - ./backend:/app
      - test_reports:/app/reports
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: python scripts/run_tests.py --integration --verbose
    networks:
      - test-network

  # Load Tests
  load-tests:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      TESTING: "true"
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/mindbridge_test
      REDIS_URL: redis://test-redis:6379/0
    volumes:
      - ./backend:/app
      - test_reports:/app/reports
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: python scripts/run_tests.py --load --verbose
    networks:
      - test-network

  # Code Quality Checks
  quality-checks:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      TESTING: "true"
    volumes:
      - ./backend:/app
      - test_reports:/app/reports
    command: >
      sh -c "
        python scripts/run_tests.py --lint &&
        python scripts/run_tests.py --type-check &&
        python scripts/run_tests.py --security
      "
    networks:
      - test-network

  # Test Report Generator
  test-reports:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      TESTING: "true"
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/mindbridge_test
      REDIS_URL: redis://test-redis:6379/0
    volumes:
      - ./backend:/app
      - test_reports:/app/reports
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: python scripts/run_tests.py --report
    networks:
      - test-network

  # Test Results Web Server
  test-results-server:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - test_reports:/usr/share/nginx/html:ro
      - ./infrastructure/nginx/test-results.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - test-reports
    networks:
      - test-network

volumes:
  test_postgres_data:
  test_reports:

networks:
  test-network:
    driver: bridge 